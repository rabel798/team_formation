{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const teamService = {\n  getTeams: async () => {\n    const response = await api.get('/teams/');\n    return response.data;\n  },\n  createTeam: async teamData => {\n    try {\n      const response = await api.post('/teams/', teamData);\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        var _error$response, _error$response$data;\n        throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to create team');\n      }\n      throw error;\n    }\n  },\n  applyToTeam: async teamId => {\n    const response = await api.post(`/teams/${teamId}/apply/`);\n    return response.data;\n  },\n  handleApplication: async (teamId, applicationId, action) => {\n    try {\n      const response = await api.post(`/teams/${teamId}/handle_application/`, {\n        application_id: applicationId,\n        action\n      });\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error)) {\n        var _error$response2, _error$response2$data;\n        throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || `Failed to ${action} application`);\n      }\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","teamService","getTeams","response","get","data","createTeam","teamData","post","error","isAxiosError","_error$response","_error$response$data","Error","message","applyToTeam","teamId","handleApplication","applicationId","action","application_id","_error$response2","_error$response2$data"],"sources":["D:/team_formation/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { Team, Application } from '../types';\r\n\r\nconst API_URL = 'http://localhost:8000/api';\r\n\r\nconst api = axios.create({\r\n    baseURL: API_URL,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\nexport const teamService = {\r\n    getTeams: async (): Promise<Team[]> => {\r\n        const response = await api.get<Team[]>('/teams/');\r\n        return response.data;\r\n    },\r\n\r\n    createTeam: async (teamData: {\r\n        name: string;\r\n        project_idea: string;\r\n        required_skills: string[];\r\n        max_members: number;\r\n    }): Promise<Team> => {\r\n        try {\r\n            const response = await api.post<Team>('/teams/', teamData);\r\n            return response.data;\r\n        } catch (error) {\r\n            if (axios.isAxiosError(error)) {\r\n                throw new Error(error.response?.data?.message || 'Failed to create team');\r\n            }\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    applyToTeam: async (teamId: number): Promise<Application> => {\r\n        const response = await api.post<Application>(`/teams/${teamId}/apply/`);\r\n        return response.data;\r\n    },\r\n\r\n    handleApplication: async (\r\n        teamId: number,\r\n        applicationId: number,\r\n        action: 'accept' | 'reject'\r\n    ): Promise<Application> => {\r\n        try {\r\n            const response = await api.post<Application>(`/teams/${teamId}/handle_application/`, {\r\n                application_id: applicationId,\r\n                action\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            if (axios.isAxiosError(error)) {\r\n                throw new Error(error.response?.data?.message || `Failed to ${action} application`);\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAG;EACvBC,QAAQ,EAAE,MAAAA,CAAA,KAA6B;IACnC,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAS,SAAS,CAAC;IACjD,OAAOD,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDC,UAAU,EAAE,MAAOC,QAKlB,IAAoB;IACjB,IAAI;MACA,MAAMJ,QAAQ,GAAG,MAAMN,GAAG,CAACW,IAAI,CAAO,SAAS,EAAED,QAAQ,CAAC;MAC1D,OAAOJ,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZ,IAAId,KAAK,CAACe,YAAY,CAACD,KAAK,CAAC,EAAE;QAAA,IAAAE,eAAA,EAAAC,oBAAA;QAC3B,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAF,KAAK,CAACN,QAAQ,cAAAQ,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBN,IAAI,cAAAO,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,uBAAuB,CAAC;MAC7E;MACA,MAAML,KAAK;IACf;EACJ,CAAC;EAEDM,WAAW,EAAE,MAAOC,MAAc,IAA2B;IACzD,MAAMb,QAAQ,GAAG,MAAMN,GAAG,CAACW,IAAI,CAAc,UAAUQ,MAAM,SAAS,CAAC;IACvE,OAAOb,QAAQ,CAACE,IAAI;EACxB,CAAC;EAEDY,iBAAiB,EAAE,MAAAA,CACfD,MAAc,EACdE,aAAqB,EACrBC,MAA2B,KACJ;IACvB,IAAI;MACA,MAAMhB,QAAQ,GAAG,MAAMN,GAAG,CAACW,IAAI,CAAc,UAAUQ,MAAM,sBAAsB,EAAE;QACjFI,cAAc,EAAEF,aAAa;QAC7BC;MACJ,CAAC,CAAC;MACF,OAAOhB,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZ,IAAId,KAAK,CAACe,YAAY,CAACD,KAAK,CAAC,EAAE;QAAA,IAAAY,gBAAA,EAAAC,qBAAA;QAC3B,MAAM,IAAIT,KAAK,CAAC,EAAAQ,gBAAA,GAAAZ,KAAK,CAACN,QAAQ,cAAAkB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBhB,IAAI,cAAAiB,qBAAA,uBAApBA,qBAAA,CAAsBR,OAAO,KAAI,aAAaK,MAAM,cAAc,CAAC;MACvF;MACA,MAAMV,KAAK;IACf;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}